# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  # Replaces the value set in .env.test.local
  NEXT_PUBLIC_NODE_ENV: test
  # Replaces the value set in .env.test.local
  # DB stuff. There is a default mysql server with root/root. See https://ovirium.com/blog/how-to-make-mysql-work-in-your-github-actions/
  MYSQL_URI: "mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:3306/${{ secrets.DB_DATABASE }}?synchronize=false&charset=utf8mb4"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # strategy:
    #   matrix:
    #     node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - name: Set up MySQL
      run: |
        sudo /etc/init.d/mysql start
        echo "MySQL started"
        mysql -e 'SHOW DATABASES;' -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}
        echo "MySQL default databases"
        mysql -e 'CREATE DATABASE ${{ secrets.DB_DATABASE }};' -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}
        echo "MySQL new database created"
        mysql -e 'SHOW DATABASES;' -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}
        echo "MySQL default databases with the new one"
        mysql -e 'ALTER USER "root"@"localhost" IDENTIFIED WITH mysql_native_password BY "${{ secrets.DB_PASSWORD }}";' -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}
        echo "MySQL user changed to be able to auth using username/password"
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - uses: actions/cache@v2
      with:
        # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
    - name: Install ðŸ› 
      env:
        GH_TOKEN: ${{ github.token }}
      run: npm ci
    - name: Test ðŸ§ª
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo Run all the sh!t with a single command runnable also on dev machines
        npm run test:ci
